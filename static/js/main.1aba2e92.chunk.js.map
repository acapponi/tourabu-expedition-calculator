{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","material","id","selected","filtered","great","hourly","onlyExtras","selectMaterials","e","materialIndex","findIndex","p","target","value","materialSeleccionado","setState","getFiltered","filterIndex","map","elm","idx","filter","String","filteredData","sort","a","b","promA","promB","el","i","Math","round","minutes","length","item","aux","toggleGreatSuccess","toggleHourly","toggleonlyExtras","materials","className","this","mat","index","key","type","name","checked","onChange","bind","src","alt","results","charcoalDisplay","steelDisplay","coolantDisplay","whetstoneDisplay","time","charcoal_success","steel_success","coolant_success","whetstone_success","charcoal","steel","coolant","whetstone","hours","rhours","floor","rminutes","slice","other","req_level","req_sword","href","htmlFor","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1aba2e92.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport data from './data/tourabu_calculator.json';\n\nclass App extends Component {\n  state = {\n    data: data,\n    material: [\n      { id:'charcoal', selected:false },\n      { id:'steel', selected:false },\n      { id:'coolant', selected:false },\n      { id:'whetstone', selected:false },\n    ],\n    filtered : null,\n    great : true,\n    hourly : false,\n    onlyExtras: false\n  }\n\n  /* cambio el estado del checkbox*/\n  selectMaterials = (e) => {\n    const materialIndex = this.state.material.findIndex(p => {\n      return p.id === e.target.value;\n    })\n\n    const materialSeleccionado = {...this.state.material[materialIndex]}\n  \tmaterialSeleccionado.selected = !materialSeleccionado.selected\n\n    const material = [...this.state.material];\n    material[materialIndex] = materialSeleccionado;\n\n    this.setState({ material: material },\n    () => {\n      this.getFiltered()\n    });\n  }\n\n  /* filtro valores */\n  getFiltered = () => {\n    let filterIndex = this.state.material.map((elm, idx) => elm.selected === true ? elm.id : '').filter(String);\n\n    let filteredData =this.state.data;\n\n    filteredData = filteredData.sort((a, b) => {\n      var promA = 0;\n      var promB = 0;\n      filterIndex.map((el,i) => {\n        promA = promA + Math.round(60*a[el]/a.minutes);\n        promB = promB + Math.round(60*b[el]/b.minutes);\n      })\n\n      promA = promA/filterIndex.length;\n      promB = promB/filterIndex.length;\n\n      return promB - promA;\n    });\n    filterIndex.map((el,i) => {\n    })\n\n\n    filteredData = filteredData.filter(item => {\n      let aux = false;\n      filterIndex.map((el,i) => {\n        if(item[el] > 0){\n          aux=aux+1;\n        }\n      })\n\n      if(aux === filterIndex.length){\n        return item;\n      }\n    });\n\n    this.setState({ filtered: filteredData })\n  }\n\n  /* toggle Great Success */\n  toggleGreatSuccess = () => {\n    const great = this.state.great;\n    this.setState({ great: !great })\n  }\n\n  /* toggle Hourly */\n  toggleHourly = () => {\n    const hourly = this.state.hourly;\n    this.setState({ hourly: !hourly })\n  }\n\n  /* toggle onlyExtras */\n  toggleonlyExtras = () => {\n    const onlyExtras = this.state.onlyExtras;\n    this.setState({ onlyExtras: !onlyExtras })\n  }\n\n  render() {\n\n    let materials = null;\n    materials = (\n      <div className=\"material-selector\">\n        {this.state.material.map((mat, index) => {\n          return(\n            <label key={mat.id}>\n              <input type=\"checkbox\"\n                name=\"materialSelector\"\n                value={mat.id}\n                checked={mat.selected}\n                onChange={this.selectMaterials.bind(this)} />\n              <span>\n                <img src={'./images/'+mat.id+'.png'} alt={mat.id} />\n                <span>{mat.id}</span>\n              </span>\n            </label>\n          )\n        })}\n      </div>\n    );\n\n    let results = null;\n\n    if((this.state.filtered !== null) && ((this.state.filtered).length > 0)){\n      results = (\n        <div className=\"showResults\">\n          {this.state.filtered.map((item, index) => {\n\n            let charcoalDisplay, steelDisplay, coolantDisplay, whetstoneDisplay, time;\n\n            if(this.state.great){\n              charcoalDisplay = item.charcoal_success;\n              steelDisplay = item.steel_success;\n              coolantDisplay = item.coolant_success;\n              whetstoneDisplay = item.whetstone_success;\n            }else{\n              charcoalDisplay = item.charcoal;\n              steelDisplay = item.steel;\n              coolantDisplay = item.coolant;\n              whetstoneDisplay = item.whetstone;\n            }\n\n            if(this.state.hourly){\n              charcoalDisplay = Math.round(60*charcoalDisplay/item.minutes);\n              steelDisplay = Math.round(60*steelDisplay/item.minutes);\n              coolantDisplay = Math.round(60*coolantDisplay/item.minutes);\n              whetstoneDisplay = Math.round(60*whetstoneDisplay/item.minutes);\n            }\n\n            var hours = (item.minutes / 60);\n            var rhours = Math.floor(hours);\n            var minutes = (hours - rhours) * 60;\n            var rminutes = Math.round(minutes);\n            time = ('0'+rhours).slice(-2) + \":\" + ('0'+rminutes).slice(-2);\n\n            if(this.state.onlyExtras && item.other === ''){return;}\n\n            return(\n              <div key={item.id} className=\"result\">\n                <h2>{item.id}<small>{time}</small></h2>\n                <div className=\"result-content\">\n                  <div>\n                    <ul>\n                      <li>Charcoal: {charcoalDisplay}</li>\n                      <li>Steel: {steelDisplay}</li>\n                      <li>Coolant: {coolantDisplay}</li>\n                      <li>Whetstone: {whetstoneDisplay}</li>\n                    </ul>\n                    {item.other !== '' &&\n                      <span className=\"icon-plus\">{item.other}</span>\n                    }\n                  </div>\n                  <div className=\"requires\">\n                    <div>Sword level: {item.req_level}</div>\n                    {item.req_sword !== '' &&\n                      <div>Sword type: {item.req_sword}</div>\n                    }\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      );\n    }else{\n      results = (\n        <div className=\"startText\">\n          <p>To start click on the material(s) you need.</p>\n          <p><small>This tool was made for fun, based on data from the <a href=\"https://touken-ranbu.fandom.com/wiki/Expeditions\" target=\"_blank\">Expeditions page</a> from the Touken Ranbu wiki. It shows the best expedition to get the materials selected.</small></p>\n        </div>\n      );\n    }\n\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-wrapper\">\n          <header className=\"App-header\">\n            <div>\n              <h1 className=\"App-title\">Expedition drop calculator</h1>\n              <div>\n                {materials}\n                <div>\n                  <div className=\"custom-control custom-switch  custom-control-inline\">\n                    <input type=\"checkbox\"\n                      className=\"custom-control-input showGreatSuccess\"\n                      name=\"showGreatSuccess\" id=\"showGreatSuccess\"\n                      onChange={this.toggleGreatSuccess} checked={this.state.great} />\n                    <label className=\"custom-control-label\" htmlFor=\"showGreatSuccess\">Great Success</label>\n                  </div>\n\n                  <div className=\"custom-control custom-switch  custom-control-inline\">\n                    <input type=\"checkbox\"\n                      className=\"custom-control-input toggleHourly\"\n                      name=\"toggleHourly\" id=\"toggleHourly\"\n                      onChange={this.toggleHourly} checked={this.state.hourly} />\n                    <label className=\"custom-control-label\" htmlFor=\"toggleHourly\">Drop by hour</label>\n                  </div>\n\n                  <div className=\"custom-control custom-switch  custom-control-inline\">\n                    <input type=\"checkbox\"\n                      className=\"custom-control-input toggleHourly\"\n                      name=\"toggleonlyExtras\" id=\"toggleonlyExtras\"\n                      onChange={this.toggleonlyExtras} checked={this.state.onlyExtras} />\n                    <label className=\"custom-control-label\" htmlFor=\"toggleonlyExtras\">Only extra drop</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </header>\n          <main className=\"App-content\">\n            {results}\n          </main>\n          <footer  className=\"App-footer\">\n            <a href=\"https://github.com/acapponi\" target=\"_blank\"><img src=\"./images/github.svg\" width=\"15\"/> <span>acapponi</span></a>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}